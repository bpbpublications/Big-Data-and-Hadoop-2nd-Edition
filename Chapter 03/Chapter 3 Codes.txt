Weather data code of map reduce in javapublic class WeatherData {	public static class MaxTemperatureMapper extends MapReduceBase implements Mapper<LongWritable, Text, Text, Text> {    @Override    public void map(LongWritable arg0, Text value, OutputCollector<Text, Text> output, Reporter arg3)            throws IOException {        String line = value.toString();        // Example of Input        // Date       Max     Min        // 25380 20130101  2.514 -135.69   58.43     8.3     1.1     4.7     4.9     5.6     0.01 C     1.0    -0.1     0.4    97.3    36.0    69.4 -99.000 -99.000 -99.000 -99.000 -99.000 -9999.0 -9999.0 -9999.0 -9999.0 -9999.0        String date = line.substring(6, 14);        float temp_Max = Float.parseFloat(line.substring(39, 45).trim());        float temp_Min = Float.parseFloat(line.substring(47, 53).trim());        if (temp_Max > 40.0) {            // Hot day            output.collect(new Text("Hot Day " + date), new Text(String.valueOf(temp_Max)));        }        if (temp_Min < 10) {            // Cold day            output.collect(new Text("Cold Day " + date), new Text(String.valueOf(temp_Min)));        }    }}public static class MaxTemperatureReducer extends MapReduceBase implements Reducer<Text, Text, Text, Text> {    @Override    public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter arg3)            throws IOException {        // Find Max temp yourself ?        String temperature = values.next().toString();        output.collect(key, new Text(temperature));    }}public static void main(String[] args) throws Exception {    JobConf conf = new JobConf(WeatherData.class);    conf.setJobName("temp");    // Note:- As Mapper's output types are not default so we have to define    // the    // following properties.    conf.setMapOutputKeyClass(Text.class);    conf.setMapOutputValueClass(Text.class);    conf.setMapperClass(MaxTemperatureMapper.class);    conf.setReducerClass(MaxTemperatureReducer.class);    conf.setInputFormat(TextInputFormat.class);    conf.setOutputFormat(TextOutputFormat.class);    FileInputFormat.setInputPaths(conf, new Path(args[0]));    FileOutputFormat.setOutputPath(conf, new Path(args[1]));    JobClient.runJob(conf);}}Driver class code with no reducer in javapublic static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {        // Create a new job    Job job = Job.getInstance();    job.setJarByClass(MyExample.class);    job.setJobName("DCTest");        // Set the number of reducers to zero    job.setNumReduceTasks(0);        // Add a file to the distributed cache    try {        DistributedCache.addCacheFile(new URI("/abc.dat"), job.getConfiguration());    } catch (URISyntaxException e) {        System.err.println("Error adding file to distributed cache: " + e.getMessage());        System.exit(1);    }        // Set the mapper class and output key/value classes    job.setMapperClass(MyMapper.class);    job.setMapOutputKeyClass(Text.class);    job.setMapOutputValueClass(Text.class);        // Set the input and output paths    FileInputFormat.addInputPath(job, new Path(args[0]));    FileOutputFormat.setOutputPath(job, new Path(args[1]));        // Submit the job and wait for it to complete    if (!job.waitForCompletion(true)) {        System.err.println("Error running job");        System.exit(1);    }}Java code to extract max temp from raw datapublic static class MaxTemperatureMapper       extends Mapper<LongWritable, Text, Text, IntWritable> {    private Text year = new Text();    private IntWritable temperature = new IntWritable();    public void map(LongWritable key, Text value, Context context)            throws IOException, InterruptedException {        String line = value.toString();        String[] tokens = line.split("\\s+");        String yearString = tokens[0];        String temperatureString = tokens[1].trim();        int temperatureValue = Integer.parseInt(temperatureString);        year.set(yearString);        temperature.set(temperatureValue);        context.write(year, temperature);    }}public static class MaxTemperatureReducer       extends Reducer<Text, IntWritable, Text, IntWritable> {    public void reduce(Text key, Iterable<IntWritable> values, Context context)            throws IOException, InterruptedException {        int maxTemperature = Integer.MIN_VALUE;        for (IntWritable value : values) {            int temperature = value.get();            if (temperature > maxTemperature) {                maxTemperature = temperature;            }        }        context.write(key, new IntWritable(maxTemperature));    }}Hadoop pipes code in C++class MaxTemperatureMapper : public HadoopPipes::Mapper{public:MaxTemperatureMapper(HadoopPipes::TaskContext& context) { }void map(HadoopPipes::MapContext& context){// Convert input data to stringstd::string line = context.getInputValue();    // Extract year and temp from the string using substring method    std::string year = line.substr(14, 4);    std::string temp = line.substr(24, 5);    // Output year and temp to context as key-value pairs    context.emit(year, temp);}};class MaxTemperatureReducer : public HadoopPipes::Reducer{public:MaxTemperatureReducer(HadoopPipes::TaskContext& context) {}void reduce(HadoopPipes::ReduceContext& context){// Find the maximum temperature for each yearint max_temp = -9999;while (context.nextValue()){int temp = std::stoi(context.getInputValue());if (temp > max_temp){max_temp = temp;}}    // Output the year and its corresponding max temp    context.emit(context.getInputKey(), std::to_string(max_temp));}};int main(int argc, char *argv[]){// Run the Hadoop Pipes task with the MaxTemperatureMapper and MaxTemperatureReducerreturn HadoopPipes::runTask( HadoopPipes::TemplateFactory<MaxTemperatureMapper,MaxTemperatureReducer>());}Compression and input splitpublic class MaxTemperatureWithCompression {    public static void main(String[] args) throws Exception {        if (args.length != 2) {            System.err.println("Usage: MaxTemperatureWithCompression <input path> " 	+ "<output path>");            System.exit(-1);        }        Job job = new Job();        job.setJarByClass(MaxTemperature.class);        FileInputFormat.addInputPath(job, new Path(args[0]));        FileOutputFormat.setOutputPath(job, new Path(args[1]));        job.setOutputKeyClass(Text.class);        job.setOutputValueClass(IntWritable.class);        FileOutputFormat.setCompressOutput(job, true);        FileOutputFormat.setOutputCompressorClass(job, GzipCodec.class);        job.setMapperClass(MaxTemperatureMapper.class);        job.setCombinerClass(MaxTemperatureReducer.class);        job.setReducerClass(MaxTemperatureReducer.class);        System.exit(job.waitForCompletion(true) ? 0 : 1);    }}Use of Avro data with mapreduceimport java.io.IOException;import org.apache.avro.Schema;import org.apache.avro.generic.GenericData;import org.apache.avro.generic.GenericRecord;import org.apache.avro.mapred.AvroCollector;import org.apache.avro.mapred.AvroJob;import org.apache.avro.mapred.AvroMapper;import org.apache.avro.mapred.AvroReducer;import org.apache.avro.mapred.AvroUtf8InputFormat;import org.apache.avro.mapred.Pair;import org.apache.avro.util.Utf8;import org.apache.hadoop.conf.Configured;import org.apache.hadoop.fs.Path;import org.apache.hadoop.mapred.FileInputFormat;import org.apache.hadoop.mapred.FileOutputFormat;import org.apache.hadoop.mapred.JobClient;import org.apache.hadoop.mapred.JobConf;import org.apache.hadoop.mapred.Reporter;import org.apache.hadoop.util.Tool;import org.apache.hadoop.util.ToolRunner;public class AvroGenericMaxTemperature extends Configured implements Tool {  private static final Schema SCHEMA = new Schema.Parser().parse(    "{"      + "\"type\": \"record\","      + "\"name\": \"WeatherRecord\","      + "\"doc\": \"A weather reading.\","      + "\"fields\": ["        + "{\"name\": \"year\", \"type\": \"int\"},"        + "{\"name\": \"temperature\", \"type\": \"int\"},"        + "{\"name\": \"stationId\", \"type\": \"string\"}"      + "]"    + "}"  );  public static class MaxTemperatureMapper      extends AvroMapper<Utf8, Pair<Integer, GenericRecord>> {    private NcdcRecordParser parser = new NcdcRecordParser();    private GenericRecord record = new GenericData.Record(SCHEMA);    @Override    public void map(Utf8 line,                    AvroCollector<Pair<Integer, GenericRecord>> collector,                    Reporter reporter) throws IOException {      parser.parse(line.toString());      if (parser.isValidTemperature()) {        record.put("year", parser.getYearInt());        record.put("temperature", parser.getAirTemperature());        record.put("stationId", parser.getStationId());        collector.collect(new Pair<Integer, GenericRecord>(parser.getYearInt(), record));      }    }  }  public static class MaxTemperatureReducer      extends AvroReducer<Integer, GenericRecord, GenericRecord> {    private GenericRecord newWeatherRecord(GenericRecord value) {      GenericRecord record = new GenericData.Record(SCHEMA);      record.put("year", value.get("year"));      record.put("temperature", value.get("temperature"));      record.put("stationId", value.get("stationId"));      return record;    }    @Override    public void reduce(Integer key, Iterable<GenericRecord> values,                       AvroCollector<GenericRecord> collector, Reporter reporter)        throws IOException {      GenericRecord max = null;      for (GenericRecord value : values) {        if (max == null ||            (Integer) value.get("temperature") > (Integer) max.get("temperature")) {          max = newWeatherRecord(value);        }      }      collector.collect(max);    }  }  @Override  public int run(String[] args) throws Exception {    if (args.length != 2) {      System.err.printf("Usage: %s [generic options] <input> <output>\n", getClass().getSimpleName());      ToolRunner.printGenericCommandUsage(System.err);      return -1;    }    JobConf conf = new JobConf(getConf(), getClass());    conf.setJobName("Max temperature");    FileInputFormat.addInputPath(conf, new Path(args[0]));    FileOutput